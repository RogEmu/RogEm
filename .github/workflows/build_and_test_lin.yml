# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Linux Build and Test

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: [self-hosted]

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        build_type: [Release, Debug]
        c_compiler: [gcc]
        include:
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
          # - os: ubuntu-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    - name: Update System
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y

    - name: Install Dependecies
      run: |
        sudo apt-get install -y build-essential\
                                cmake\
                                ninja-build\
                                curl\
                                zip\
                                unzip\
                                tar\
                                pkg-config\
                                libxinerama-dev\
                                libxcursor-dev\
                                xorg-dev\
                                libglu1-mesa-dev

    - name: Cache .git
      id: git-cache
      uses: actions/cache@v4
      with:
        path: .git/
        key: ${{ runner.os }}-git

    - name: Cache Dependencies
      id: deps-cache
      uses: actions/cache@v4
      with:
        path: vcpkg/
        key: ${{ runner.os }}-vcpkg

    - name: Init Submodules
      # if: steps.deps-cache.outputs.cache-hit != 'true'
      run: |
        git submodule update --init

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ github.workspace }}/build
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -G Ninja

    - name: Output Logs On Failure
      if: failure()
      run: |
        cat ${{ github.workspace }}/build/vcpkg-bootstrap.log

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ github.workspace }}/build
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./tests/rogem_tests
